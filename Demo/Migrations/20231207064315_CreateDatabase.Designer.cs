// <auto-generated />
using System;
using Demo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Demo.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20231207064315_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Demo.Models.Faculty", b =>
                {
                    b.Property<string>("Faculty_Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Faculty_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Faculty_Code");

                    b.ToTable("Facultys");
                });

            modelBuilder.Entity("Demo.Models.IntakeYear", b =>
                {
                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Year");

                    b.ToTable("IntakeYears");
                });

            modelBuilder.Entity("Demo.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("DATE");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MessageId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserEmail");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Demo.Models.Programme", b =>
                {
                    b.Property<string>("Programme_Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Faculty_Code")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Programme_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Programme_Code");

                    b.HasIndex("Faculty_Code");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("Demo.Models.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Faculty_Code")
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("Room_CreatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("Room_Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Room_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Room_Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoomId");

                    b.HasIndex("Faculty_Code");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Demo.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculty_Code")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Programme_Code")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("bit");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Email");

                    b.HasIndex("Faculty_Code");

                    b.HasIndex("Programme_Code");

                    b.HasIndex("Year");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Demo.Models.UserList", b =>
                {
                    b.Property<string>("UserListID")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserListID");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserEmail");

                    b.ToTable("UserLists");
                });

            modelBuilder.Entity("Demo.Models.Lecturer", b =>
                {
                    b.HasBaseType("Demo.Models.User");

                    b.HasDiscriminator().HasValue("Lecturer");
                });

            modelBuilder.Entity("Demo.Models.Student", b =>
                {
                    b.HasBaseType("Demo.Models.User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Demo.Models.SuperAdmin", b =>
                {
                    b.HasBaseType("Demo.Models.User");

                    b.HasDiscriminator().HasValue("SuperAdmin");
                });

            modelBuilder.Entity("Demo.Models.Admin", b =>
                {
                    b.HasBaseType("Demo.Models.SuperAdmin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Demo.Models.Message", b =>
                {
                    b.HasOne("Demo.Models.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Demo.Models.Programme", b =>
                {
                    b.HasOne("Demo.Models.Faculty", null)
                        .WithMany("Programmes")
                        .HasForeignKey("Faculty_Code");
                });

            modelBuilder.Entity("Demo.Models.Room", b =>
                {
                    b.HasOne("Demo.Models.Faculty", null)
                        .WithMany("Rooms")
                        .HasForeignKey("Faculty_Code");
                });

            modelBuilder.Entity("Demo.Models.User", b =>
                {
                    b.HasOne("Demo.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("Faculty_Code");

                    b.HasOne("Demo.Models.Programme", "Programme")
                        .WithMany("Users")
                        .HasForeignKey("Programme_Code");

                    b.HasOne("Demo.Models.IntakeYear", "IntakeYear")
                        .WithMany("Users")
                        .HasForeignKey("Year");

                    b.Navigation("Faculty");

                    b.Navigation("IntakeYear");

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("Demo.Models.UserList", b =>
                {
                    b.HasOne("Demo.Models.Room", "Room")
                        .WithMany("UserLists")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo.Models.User", null)
                        .WithMany("UserLists")
                        .HasForeignKey("UserEmail");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Demo.Models.Faculty", b =>
                {
                    b.Navigation("Programmes");

                    b.Navigation("Rooms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Demo.Models.IntakeYear", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Demo.Models.Programme", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Demo.Models.Room", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserLists");
                });

            modelBuilder.Entity("Demo.Models.User", b =>
                {
                    b.Navigation("UserLists");
                });
#pragma warning restore 612, 618
        }
    }
}
